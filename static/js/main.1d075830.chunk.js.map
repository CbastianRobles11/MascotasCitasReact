{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","length","id","uuidv4","console","log","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1d075830.chunk.js","sourcesContent":["import React,{Fragment, useState} from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n    \r\n    //crear states de citas\r\n    const [cita,actualizarCita]=useState({\r\n        mascota:'',\r\n        propietario:'',\r\n        fecha:'',\r\n        hora:'',\r\n        sintomas:''\r\n    });\r\n\r\n    //crear un state para errores\r\n    const[error,actualizarError]=useState(false)\r\n\r\n\r\n\r\n\r\n//funcion que se ejecuta cada que el usuario escribe un input\r\n    const actualizarState=(e)=>{       \r\n        // e.target.name\r\n        // e.target.value\r\n        //modificar el actializar cita con destructori\r\n        actualizarCita({\r\n            //una coppia del state para que no se boorre los lvalores\r\n            ...cita,\r\n            [e.target.name]:[e.target.value]\r\n        })\r\n\r\n    }\r\n\r\n    //extrar los valores\r\n    const {mascota ,propietario,fecha,hora,sintomas}=cita;\r\n\r\n    //cuando el usuario presione agregar cita\r\n    const submitCita=(e)=>{\r\n        e.preventDefault();\r\n\r\n        // alert('funciona')\r\n        // console.log(mascota);\r\n        \r\n        //validar \r\n        //  trim elimina los espacios en blaco\r\n        if(mascota.length ===0 || propietario.length ===0  || fecha.length ===0  || hora.length ===0  || sintomas.length ===0 ){\r\n            //cambiar el estado\r\n            actualizarError(true);\r\n            return;\r\n        }\r\n\r\n        //eliminar el mensaje de erro\r\n        actualizarError(false)\r\n        \r\n        //asignar un id\r\n        cita.id=uuidv4();\r\n        console.log(cita);\r\n\r\n        //crear la cita y le pasamos la cita\r\n        crearCita(cita);\r\n\r\n        //reiniciar el formulario\r\n        actualizarCita({\r\n            mascota:'',\r\n            propietario:'',\r\n            fecha:'',\r\n            hora:'',\r\n            sintomas:''\r\n        })\r\n\r\n    }\r\n\r\n\r\n    return ( \r\n        <Fragment>\r\n\r\n            {/* si error es true ejecuta  */}\r\n            {error ? <p className=\"alerta-error\">Todos los campos son obligatorios </p>   : null}\r\n\r\n            <h2>Crear Citas</h2>\r\n            <form \r\n\r\n                onSubmit={submitCita}\r\n            >\r\n                <label>Nombre De Paciente</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"mascota\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"nombre de la mascota\"   \r\n                    onChange={actualizarState}    \r\n                    //los value de lo extraido de citas \r\n                    value={mascota}         \r\n                />\r\n\r\n                <label>Nombre Del Dueno</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"propietario\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"nombre del dueno\"       \r\n                    onChange={actualizarState}    \r\n                    value={propietario}       \r\n                />\r\n\r\n                <label>Fecha</label>\r\n                <input\r\n                    type=\"date\"\r\n                    name=\"fecha\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}    \r\n                    value={fecha}             \r\n                />\r\n\r\n                <label>Hora</label>\r\n                <input\r\n                    type=\"time\"\r\n                    name=\"hora\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}  \r\n                    value={hora}\r\n                />\r\n\r\n                <label>Descripcion</label>\r\n                <textarea\r\n                    \r\n                    name=\"sintomas\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Los sintomas\"   \r\n                    onChange={actualizarState} \r\n                    value={sintomas}              \r\n                >\r\n                </textarea>\r\n                <input\r\n                    type=\"submit\"\r\n                    className=\"u-full-with button-primary\"\r\n                    value=\"Agregar Cita\"\r\n                />\r\n                \r\n            </form>\r\n        </Fragment>\r\n      \r\n     );\r\n}\r\n \r\n//documental los componentes con proptypes\r\nFormulario.propTypes={\r\n    // como crar cita es obligatorio i es una funcion\r\n    crearCita:PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Cita = ({cita,eliminarCita}) => {\r\n    return ( \r\n        <div className=\"cita\">\r\n\r\n            <p>Mascota: <span>{cita.mascota}</span> </p>\r\n            <p>Duenio: <span>{cita.propietario}</span> </p>\r\n            <p>Fecha: <span>{cita.fecha}</span> </p>\r\n            <p>Hora: <span>{cita.hora}</span> </p>\r\n            <p>Sintomas: <span>{cita.sintomas}</span> </p>\r\n\r\n            <button\r\n                className=\"button eliminar u-full-width\"\r\n                //como around funcon para que espere al clik sino llamara direncto la funcion\r\n                onClick={ ()=> eliminarCita(cita.id)}\r\n            >\r\n                Eliminar &times;</button>\r\n        </div>\r\n     );\r\n}\r\n \r\nCita.propTypes={\r\n    cita:PropTypes.object.isRequired,\r\n    eliminarCita:PropTypes.func.isRequired\r\n}\r\n\r\nexport default Cita;","import React,{Fragment, useState, useEffect} from 'react';\nimport Formulario from './components/Formulario'\nimport Cita from './components/Cita'\n\n\nfunction App() {\n\n  //citas en ls\n  //ver si hay algo\n  let citasIniciales=JSON.parse(localStorage.getItem('citas'))\n  if(!citasIniciales){\n    citasIniciales=[]\n  }\n\n  //arreglo de citas\n  const [citas,guardarCitas]=useState([citasIniciales]);\n\n  //use effect para realizar siertas operaciones cuando el state cambia\n  //siempre es un around function\n  useEffect(()=>{\n    // let citasIniciales=JSON.parse(localStorage.getItem('citas'))\n    // /pprobar\n    // console.log('documento listo o algo paso con las citas');\n    \n    //si hay algo\n    if(citasIniciales){\n        localStorage.setItem('citas',JSON.stringify(citas))\n    }else{\n      // /si no hay nada\n      localStorage.setItem('citas',JSON.stringify(citas))\n    }\n\n  },[citas,citasIniciales] )\n\n  //funcion que tome las cits actuales ut agregue las nuevas\n  const crearCita=cita=>{\n    // console.log(cita);\n    guardarCitas([\n      //ponemos el array lo que tengamos para no perder datos\n      ...citas,\n      //agregamos la nueva cita\n      cita\n    ])\n    \n  }\n\n  //aki se eliminara las citas ya que aki esta la referencia de las citas\n  //elimina cit x id\n  const eliminarCita=id=>{\n    // /conecta la funcion\n    // console.log(id);\n\n    const nuevasCitas=citas.filter(cita=> cita.id!== id)\n    //ahora guardar citas == nuevas citas\n    guardarCitas(nuevasCitas)\n    \n  }\n\n  //mensaje condicional\n  const titulo=citas.length===0 ? 'No Hay Citas'  :'Administra Tus Citas'\n\n  return (\n    <Fragment>\n      <h1>Administrador de Pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n              <Formulario\n                crearCita={crearCita}\n              />\n            </div>\n            <div className=\"one-half column\">\n              <h2>{titulo}</h2>\n                {citas.map(cita=>(\n                  <Cita \n                    key={cita.id}\n                    cita={cita}\n                    eliminarCita={eliminarCita}\n                  />\n                ))}\n            </div>\n        </div>\n         \n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}